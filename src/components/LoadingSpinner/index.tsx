import React from "react";
import { Animated, View } from "react-native";
import { Path, Svg } from "react-native-svg";

import colors, { opacity } from "@/utils/colors";

import Text from "../Text";

import styles from "./styles";

const Icon_Loading = ({ dark }: { dark?: boolean }) => (
  <Svg width="85" height="85" viewBox="0 0 284 284" fill="none">
    <Path d="M120.518 11.7789C125.9 10.5548 139.784 11.0942 152.268 23.0438C164.751 34.9934 165.187 50.181 163.845 56.2811" stroke={dark ? colors.gray100 : colors.gray700} strokeWidth="8" stroke-linecap="round"/>
    <Path fill-rule="evenodd" clip-rule="evenodd" d="M46.986 93.8107C46.747 94.0517 46.5327 94.3079 46.343 94.5761L46.2645 94.4983C27.1304 113.796 27.2626 144.95 46.5598 164.084L142.576 259.289C161.044 277.601 190.373 278.267 209.631 261.375L209.697 261.44L210.97 260.156C211.372 259.777 211.77 259.389 212.162 258.994L212.142 258.974L235.054 235.867L185.265 186.498L163.125 208.826C162.476 208.755 161.844 208.642 161.242 208.504L97.3813 145.183C97.2286 144.18 97.2892 143.269 97.4624 142.487L117.908 121.867L68.1182 72.4983L46.986 93.8107Z" fill={dark ? colors.gray100 : colors.gray700}/>
    <Path d="M102.56 28.5879C106.815 28.2138 117.534 29.6916 126.37 38.5964C135.205 47.5013 134.48 57.5726 133.013 61.4952" stroke={dark ? colors.gray100 : colors.gray700} strokeWidth="8" stroke-linecap="round"/>
  </Svg>
);

const Icon_LoadingNoFill = ({ dark }: { dark?: boolean }) => (
  <Svg width="85" height="85" viewBox="0 0 284 284" fill="none">
    <Path d="M120.518 11.7789C125.9 10.5548 139.784 11.0942 152.268 23.0438C164.751 34.9934 165.187 50.181 163.845 56.2811" stroke={dark ? colors.gray100 : colors.gray700} strokeWidth="4" stroke-linecap="round"/>
    <Path d="M68.7361 74.852L82.0179 61.457C83.1845 60.2805 85.084 60.2724 86.2605 61.439L128.877 103.695C130.053 104.862 130.061 106.761 128.895 107.938L115.613 121.333L68.7361 74.852Z" stroke={dark ? colors.gray100 : colors.gray700} strokeWidth="4"/>
    <Path d="M187.736 186.852L201.018 173.457C202.185 172.28 204.084 172.272 205.261 173.439L247.949 215.767C249.126 216.933 249.134 218.833 247.967 220.009L234.685 233.404L187.736 186.852Z" stroke={dark ? colors.gray100 : colors.gray700} strokeWidth="4"/>
    <Path d="M46.343 94.5761L44.9348 95.9963L46.612 97.6594L47.9759 95.731L46.343 94.5761ZM46.986 93.8107L48.4062 95.2189L48.4062 95.2189L46.986 93.8107ZM46.2645 94.4983L47.6727 93.0781L46.2525 91.6699L44.8443 93.0902L46.2645 94.4983ZM46.5598 164.084L47.968 162.664L47.968 162.664L46.5598 164.084ZM142.576 259.289L143.984 257.869L143.984 257.869L142.576 259.289ZM209.631 261.375L211.039 259.954L209.715 258.641L208.312 259.871L209.631 261.375ZM209.697 261.44L208.289 262.86L209.709 264.268L211.117 262.848L209.697 261.44ZM210.97 260.156L209.597 258.702L209.573 258.725L209.55 258.748L210.97 260.156ZM212.162 258.994L213.582 260.402L214.99 258.982L213.57 257.573L212.162 258.994ZM212.142 258.974L210.722 257.566L209.314 258.986L210.734 260.394L212.142 258.974ZM235.054 235.867L236.474 237.275L237.882 235.855L236.462 234.447L235.054 235.867ZM185.265 186.498L186.673 185.078L185.253 183.67L183.844 185.09L185.265 186.498ZM163.125 208.826L162.907 210.814L163.866 210.92L164.545 210.235L163.125 208.826ZM161.242 208.504L159.834 209.924L160.238 210.325L160.793 210.453L161.242 208.504ZM97.3813 145.183L95.404 145.484L95.5035 146.138L95.9731 146.603L97.3813 145.183ZM97.4624 142.487L96.0422 141.078L95.6347 141.489L95.5097 142.055L97.4624 142.487ZM117.908 121.867L119.328 123.275L120.736 121.855L119.316 120.447L117.908 121.867ZM68.1182 72.4983L69.5264 71.0781L68.1062 69.6699L66.698 71.0901L68.1182 72.4983ZM47.9759 95.731C48.102 95.5525 48.2453 95.3812 48.4062 95.2189L45.5658 92.4025C45.2487 92.7223 44.9633 93.0632 44.7101 93.4213L47.9759 95.731ZM44.8564 95.9186L44.9348 95.9963L47.7512 93.1559L47.6727 93.0781L44.8564 95.9186ZM47.968 162.664C29.4552 144.308 29.3284 114.419 47.6848 95.9065L44.8443 93.0902C24.9325 113.172 25.0701 145.593 45.1516 165.505L47.968 162.664ZM143.984 257.869L47.968 162.664L45.1516 165.505L141.168 260.709L143.984 257.869ZM208.312 259.871C189.838 276.075 161.701 275.436 143.984 257.869L141.168 260.709C160.387 279.766 190.907 280.458 210.95 262.878L208.312 259.871ZM211.105 260.02L211.039 259.954L208.223 262.795L208.289 262.86L211.105 260.02ZM209.55 258.748L208.277 260.032L211.117 262.848L212.39 261.565L209.55 258.748ZM210.742 257.585C210.365 257.965 209.983 258.338 209.597 258.702L212.343 261.611C212.761 261.216 213.174 260.813 213.582 260.402L210.742 257.585ZM210.734 260.394L210.754 260.414L213.57 257.573L213.55 257.554L210.734 260.394ZM233.634 234.459L210.722 257.566L213.562 260.382L236.474 237.275L233.634 234.459ZM183.856 187.919L233.646 237.287L236.462 234.447L186.673 185.078L183.856 187.919ZM164.545 210.235L186.685 187.907L183.844 185.09L161.705 207.418L164.545 210.235ZM163.344 206.838C162.781 206.776 162.225 206.678 161.691 206.555L160.793 210.453C161.462 210.607 162.172 210.734 162.907 210.814L163.344 206.838ZM95.9731 146.603L159.834 209.924L162.65 207.084L98.7895 143.763L95.9731 146.603ZM99.3585 144.882C99.2453 144.139 99.2917 143.477 99.4152 142.919L95.5097 142.055C95.2867 143.062 95.2119 144.222 95.404 145.484L99.3585 144.882ZM116.488 120.459L96.0422 141.078L98.8826 143.895L119.328 123.275L116.488 120.459ZM66.71 73.9185L116.5 123.287L119.316 120.447L69.5264 71.0781L66.71 73.9185ZM48.4062 95.2189L69.5384 73.9065L66.698 71.0901L45.5658 92.4025L48.4062 95.2189Z" fill={dark ? colors.gray100 : colors.gray700}/>
    <Path d="M102.56 28.5879C106.815 28.2138 117.534 29.6916 126.37 38.5964C135.205 47.5013 134.48 57.5726 133.013 61.4952" stroke={dark ? colors.gray100 : colors.gray700} strokeWidth="4" stroke-linecap="round"/>
  </Svg>
);

const LoadingSpinner = ({ show, dark }: {
  show: boolean;
  dark?: boolean;
}) => {
  const animation = React.useRef(new Animated.Value(0)).current;

  React.useEffect(() => {
    Animated.timing(animation, {
      toValue: 0,
      duration: 0,
      useNativeDriver: false
    }).start();
    const anim = setInterval(() => {
      Animated.sequence([
        Animated.timing(animation, {
          toValue: 85,
          duration: 500,
          useNativeDriver: false
        }),
        Animated.timing(animation, {
          toValue: 85,
          duration: 500,
          useNativeDriver: false
        }),
        Animated.timing(animation, {
          toValue: 0,
          duration: 500,
          useNativeDriver: false
        })
      ]).start();
    }, 1700);
    return () => clearInterval(anim);
  }, []);

  return show ? (
    <View style={{
      ...styles.loadingSpinner,
      backgroundColor: opacity(dark ? colors.gray900 : colors.gray000, 0.7),
    }}>
      <View style={styles.nofill}>
        <Icon_LoadingNoFill dark={dark} />
        <Text style={{
          ...styles.nofillText,
          color: dark ? colors.gray000 : colors.gray900,
        }}>로딩 중...</Text>
      </View>
      <View style={styles.loadingSpinnerMaskedViewParents}>
        <Animated.View style={{
          ...styles.loadingSpinnerMaskedView,
          height: animation
        }}>
          <Icon_Loading dark={dark} />
        </Animated.View>
      </View>
    </View>
  ) : null;
};

export default LoadingSpinner;